@page "/rooms/{Id}"
@rendermode InteractiveServer
@using QuizApp.Components.Logic
@using QuizApp.Components.Model

@inject RoomManager RoomManager
@inject AnswerSubmissionService AnswerSubmissionService
@inject ILeaderBoardStore LeaderBoardStore


<PageTitle>クイズルーム</PageTitle>
<h3>クイズルーム</h3>

<p>ID: @ID</p>

<ErrorDialog IsVisible="@_errorDisplayFlg" Message="@_errorMessage" OnClose="@HideError" />

@switch(_step)
{
    case Step.InputNickName:
        <div class="mb-3">
            <label class="form-label">ニックネームを入力してください</label>
            <InputText class="form-control" @bind-Value="_nickName"></InputText>
        </div>
        <MudButton Variant="Variant.Filled" Color="Color.Primary" Disabled="string.IsNullOrEmpty(_nickName)" OnClick="() => CheckNickname()">次へ</MudButton>
        break;
    case Step.AnswerQuestion:
        var q = _questions[_i];
        <div class="mb-3">
            <label class="form-label">Q@(_i + 1). @q.Question.Text</label>

            @if (q.Question is TextQuestion tq)
            {
                <InputText class="form-control" @bind-Value="q.Answer"/>
            }
            else if (q.Question is ChoiceQuestion cq)
            {
                <InputSelect class="form-select" @bind-Value="q.Answer">
                    <option value=" ">---- 選択してください ----</option>
                    @foreach (var option in cq.Options)
                    {
                        <option value="@option">@option</option>
                    }
                </InputSelect>
            }
        </div>
        @if (_i != 0)
        {
            <MudButton Variant="Variant.Filled" Color="Color.Default" OnClick="() => _i--">前へ</MudButton>
        }
        @if (_i != _questions.Count -1)
        {
            <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="async () => { await SubmitAsync(); _i++; }">次へ</MudButton>
        }
        @if (_i == _questions.Count - 1)
        {
            <MudButton Variant="Variant.Filled" Color="Color.Success" OnClick="async () => { await SubmitAsync(); _step = Step.Result;}">結果を見る</MudButton>
        }
        break;
    case Step.Result:
        <MudText Typo="Typo.body1">@_nickName さん、お疲れ様でした！</MudText>
        <MudText Typo="Typo.body1">スコア @LeaderBoardStore.GetTotalScoreAsync(ID, _nickName, CancellationToken.None).Result / @_questions.Sum(it => it.Question.Score)</MudText>
        break;
}



@code {
    [Parameter]
    public string ID { get; set; } = string.Empty;
    private enum Step { InputNickName, AnswerQuestion, Result, }
    private Step _step;
    private int _i;

    private List<QuestionAndAnswer> _questions = new();
    private string _nickName = string.Empty;
    private bool _errorDisplayFlg = false;
    private string _errorMessage = string.Empty;
    private List<string> _registerdName = new();

    private List<Question> GetQuestions(string roomId)
    {
        try
        {
            return RoomManager.GetRoom(roomId).QuestionList;
        }
        catch (Exception ex)
        {
            _errorMessage = ex.Message;
            _errorDisplayFlg = true;
            return [];
        }
    }

    private void HideError()
    {
        _errorDisplayFlg = false;
    }

    protected override async void OnInitialized()
    {
        _registerdName = await LeaderBoardStore.GetRegisteredNickNamesAsync(ID, CancellationToken.None);
        _questions = GetQuestions(ID).Select(it => new QuestionAndAnswer(it)).ToList();
    }

    private async Task SubmitAsync()
    {
        await AnswerSubmissionService.SubmitAsync(ID, _nickName, _questions[_i].Question, _questions[_i].Answer, CancellationToken.None).ConfigureAwait(true);
    }

    private record QuestionAndAnswer(Question Question)
    {
        public string Answer { get; set; } = string.Empty;
    }

    private void CheckNickname()
    {
        if(_registerdName.Contains(_nickName))
        {
            _errorMessage = "既に登録されています．別のニックネームにしてね(⋈◍＞◡＜◍)。✧♡";
            _errorDisplayFlg = true;
            return;
        }
        _step = Step.AnswerQuestion;
    }
}